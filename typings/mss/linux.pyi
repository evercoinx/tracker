"""
This type stub file was generated by pyright.
"""

import threading
from ctypes import CFUNCTYPE, POINTER, Structure, c_int
from typing import Any, Dict, Optional, TYPE_CHECKING, Tuple, Union
from .base import MSSBase

"""
This is part of the MSS Python's module.
Source: https://github.com/BoboTiG/python-mss
"""
if TYPE_CHECKING:
    ...
__all__ = ("MSS", )
ERROR = ...
PLAINMASK = ...
ZPIXMAP = ...
class Display(Structure):
    """
    Structure that serves as the connection to the X server
    and that contains all the information about that X server.
    """
    ...


class Event(Structure):
    """
    XErrorEvent to debug eventual errors.
    https://tronche.com/gui/x/xlib/event-handling/protocol-errors/default-handlers.html
    """
    _fields_ = ...


class XWindowAttributes(Structure):
    """ Attributes for the specified window. """
    _fields_ = ...


class XImage(Structure):
    """
    Description of an image as it exists in the client's memory.
    https://tronche.com/gui/x/xlib/graphics/images.html
    """
    _fields_ = ...


class XRRModeInfo(Structure):
    """ Voilà, voilà. """
    ...


class XRRScreenResources(Structure):
    """
    Structure that contains arrays of XIDs that point to the
    available outputs and associated CRTCs.
    """
    _fields_ = ...


class XRRCrtcInfo(Structure):
    """ Structure that contains CRTC information. """
    _fields_ = ...


@CFUNCTYPE(c_int, POINTER(Display), POINTER(Event))
def error_handler(_: Any, event: Any) -> int:
    """ Specifies the program's supplied error handler. """
    ...

def validate(retval: int, func: Any, args: Tuple[Any, Any]) -> Optional[Tuple[Any, Any]]:
    """ Validate the returned value of a Xlib or XRANDR function. """
    ...

CFUNCTIONS = ...
class MSS(MSSBase):
    """
    Multiple ScreenShots implementation for GNU/Linux.
    It uses intensively the Xlib and its Xrandr extension.
    """
    __slots__ = ...
    _display_dict: Dict[threading.Thread, int] = ...
    def __init__(self, display: Optional[Union[bytes, str]] = ...) -> None:
        """ GNU/Linux initialisations. """
        ...
    
    def has_extension(self, extension: str) -> bool:
        """Return True if the given *extension* is part of the extensions list of the server."""
        ...
    
    def get_error_details(self) -> Optional[Dict[str, Any]]:
        """ Get more information about the latest X server error. """
        ...
    


