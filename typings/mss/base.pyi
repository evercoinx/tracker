"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta
from typing import Any, Callable, Iterator, TYPE_CHECKING
from .screenshot import ScreenShot
from .models import Monitor, Monitors

"""
This is part of the MSS Python's module.
Source: https://github.com/BoboTiG/python-mss
"""
if TYPE_CHECKING:
    ...
lock = ...
class MSSBase(metaclass=ABCMeta):
    """ This class will be overloaded by a system specific one. """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __enter__(self) -> MSSBase:
        """ For the cool call `with MSS() as mss:`. """
        ...
    
    def __exit__(self, *_): # -> None:
        """ For the cool call `with MSS() as mss:`. """
        ...
    
    def close(self) -> None:
        """ Clean-up. """
        ...
    
    def grab(self, monitor: Monitor) -> ScreenShot:
        """
        Retrieve screen pixels for a given monitor.

        Note: *monitor* can be a tuple like PIL.Image.grab() accepts.

        :param monitor: The coordinates and size of the box to capture.
                        See :meth:`monitors <monitors>` for object details.
        :return :class:`ScreenShot <ScreenShot>`.
        """
        ...
    
    @property
    def monitors(self) -> Monitors:
        """
        Get positions of all monitors.
        If the monitor has rotation, you have to deal with it
        inside this method.

        This method has to fill self._monitors with all information
        and use it as a cache:
            self._monitors[0] is a dict of all monitors together
            self._monitors[N] is a dict of the monitor N (with N > 0)

        Each monitor is a dict with:
        {
            'left':   the x-coordinate of the upper-left corner,
            'top':    the y-coordinate of the upper-left corner,
            'width':  the width,
            'height': the height
        }
        """
        ...
    
    def save(self, mon: int = ..., output: str = ..., callback: Callable[[str], None] = ...) -> Iterator[str]:
        """
        Grab a screen shot and save it to a file.

        :param int mon: The monitor to screen shot (default=0).
                        -1: grab one screen shot of all monitors
                         0: grab one screen shot by monitor
                        N: grab the screen shot of the monitor N

        :param str output: The output filename.

            It can take several keywords to customize the filename:
            - `{mon}`: the monitor number
            - `{top}`: the screen shot y-coordinate of the upper-left corner
            - `{left}`: the screen shot x-coordinate of the upper-left corner
            - `{width}`: the screen shot's width
            - `{height}`: the screen shot's height
            - `{date}`: the current date using the default formatter

            As it is using the `format()` function, you can specify
            formatting options like `{date:%Y-%m-%s}`.

        :param callable callback: Callback called before saving the
            screen shot to a file.  Take the `output` argument as parameter.

        :return generator: Created file(s).
        """
        ...
    
    def shot(self, **kwargs: Any) -> str:
        """
        Helper to save the screen shot of the 1st monitor, by default.
        You can pass the same arguments as for ``save``.
        """
        ...
    


