"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Optional, TYPE_CHECKING
from .models import Monitor, Pixel, Pixels, Size

"""
This is part of the MSS Python's module.
Source: https://github.com/BoboTiG/python-mss
"""
if TYPE_CHECKING:
    ...
class ScreenShot:
    """
    Screen shot object.

    .. note::

        A better name would have  been *Image*, but to prevent collisions
        with PIL.Image, it has been decided to use *ScreenShot*.
    """
    __slots__ = ...
    def __init__(self, data: bytearray, monitor: Monitor, size: Optional[Size] = ...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def __array_interface__(self) -> Dict[str, Any]:
        """
        Numpy array interface support.
        It uses raw data in BGRA form.

        See https://docs.scipy.org/doc/numpy/reference/arrays.interface.html
        """
        ...
    
    @classmethod
    def from_size(cls, data: bytearray, width: int, height: int) -> ScreenShot:
        """ Instantiate a new class given only screen shot's data and size. """
        ...
    
    @property
    def bgra(self) -> bytes:
        """ BGRA values from the BGRA raw pixels. """
        ...
    
    @property
    def height(self) -> int:
        """ Convenient accessor to the height size. """
        ...
    
    @property
    def left(self) -> int:
        """ Convenient accessor to the left position. """
        ...
    
    @property
    def pixels(self) -> Pixels:
        """
        :return list: RGB tuples.
        """
        ...
    
    @property
    def rgb(self) -> bytes:
        """
        Compute RGB values from the BGRA raw pixels.

        :return bytes: RGB pixels.
        """
        ...
    
    @property
    def top(self) -> int:
        """ Convenient accessor to the top position. """
        ...
    
    @property
    def width(self) -> int:
        """ Convenient accessor to the width size. """
        ...
    
    def pixel(self, coord_x: int, coord_y: int) -> Pixel:
        """
        Returns the pixel value at a given position.

        :param int coord_x: The x coordinate.
        :param int coord_y: The y coordinate.
        :return tuple: The pixel value as (R, G, B).
        """
        ...
    


