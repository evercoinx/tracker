"""
This type stub file was generated by pyright.
"""

import grpc

"""Invocation-side implementation of gRPC Python."""
_LOGGER = ...
_USER_AGENT = ...
_EMPTY_FLAGS = ...
_DEFAULT_SINGLE_THREADED_UNARY_STREAM = ...
_UNARY_UNARY_INITIAL_DUE = ...
_UNARY_STREAM_INITIAL_DUE = ...
_STREAM_UNARY_INITIAL_DUE = ...
_STREAM_STREAM_INITIAL_DUE = ...
_CHANNEL_SUBSCRIPTION_CALLBACK_ERROR_LOG_MESSAGE = ...
_OK_RENDEZVOUS_REPR_FORMAT = ...
_NON_OK_RENDEZVOUS_REPR_FORMAT = ...
class _RPCState:
    def __init__(self, due, initial_metadata, trailing_metadata, code, details) -> None:
        ...
    
    def reset_postfork_child(self): # -> None:
        ...
    


class _InactiveRpcError(grpc.RpcError, grpc.Call, grpc.Future):
    """An RPC error not tied to the execution of a particular RPC.

    The RPC represented by the state object must not be in-progress or
    cancelled.

    Attributes:
      _state: An instance of _RPCState.
    """
    def __init__(self, state) -> None:
        ...
    
    def initial_metadata(self):
        ...
    
    def trailing_metadata(self):
        ...
    
    def code(self):
        ...
    
    def details(self): # -> str:
        ...
    
    def debug_error_string(self): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def cancel(self): # -> Literal[False]:
        """See grpc.Future.cancel."""
        ...
    
    def cancelled(self): # -> Literal[False]:
        """See grpc.Future.cancelled."""
        ...
    
    def running(self): # -> Literal[False]:
        """See grpc.Future.running."""
        ...
    
    def done(self): # -> Literal[True]:
        """See grpc.Future.done."""
        ...
    
    def result(self, timeout=...): # -> NoReturn:
        """See grpc.Future.result."""
        ...
    
    def exception(self, timeout=...): # -> Self@_InactiveRpcError:
        """See grpc.Future.exception."""
        ...
    
    def traceback(self, timeout=...): # -> TracebackType | None:
        """See grpc.Future.traceback."""
        ...
    
    def add_done_callback(self, fn, timeout=...): # -> None:
        """See grpc.Future.add_done_callback."""
        ...
    


class _Rendezvous(grpc.RpcError, grpc.RpcContext):
    """An RPC iterator.

    Attributes:
      _state: An instance of _RPCState.
      _call: An instance of SegregatedCall or IntegratedCall.
        In either case, the _call object is expected to have operate, cancel,
        and next_event methods.
      _response_deserializer: A callable taking bytes and return a Python
        object.
      _deadline: A float representing the deadline of the RPC in seconds. Or
        possibly None, to represent an RPC with no deadline at all.
    """
    def __init__(self, state, call, response_deserializer, deadline) -> None:
        ...
    
    def is_active(self): # -> bool:
        """See grpc.RpcContext.is_active"""
        ...
    
    def time_remaining(self): # -> int | None:
        """See grpc.RpcContext.time_remaining"""
        ...
    
    def cancel(self): # -> bool:
        """See grpc.RpcContext.cancel"""
        ...
    
    def add_callback(self, callback): # -> bool:
        """See grpc.RpcContext.add_callback"""
        ...
    
    def __iter__(self): # -> Self@_Rendezvous:
        ...
    
    def next(self):
        ...
    
    def __next__(self):
        ...
    
    def debug_error_string(self):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __del__(self): # -> None:
        ...
    


class _SingleThreadedRendezvous(_Rendezvous, grpc.Call, grpc.Future):
    """An RPC iterator operating entirely on a single thread.

    The __next__ method of _SingleThreadedRendezvous does not depend on the
    existence of any other thread, including the "channel spin thread".
    However, this means that its interface is entirely synchronous. So this
    class cannot completely fulfill the grpc.Future interface. The result,
    exception, and traceback methods will never block and will instead raise
    an exception if calling the method would result in blocking.

    This means that these methods are safe to call from add_done_callback
    handlers.
    """
    def cancelled(self):
        ...
    
    def running(self): # -> bool:
        ...
    
    def done(self): # -> bool:
        ...
    
    def result(self, timeout=...):
        """Returns the result of the computation or raises its exception.

        This method will never block. Instead, it will raise an exception
        if calling this method would otherwise result in blocking.

        Since this method will never block, any `timeout` argument passed will
        be ignored.
        """
        ...
    
    def exception(self, timeout=...): # -> Self@_SingleThreadedRendezvous | None:
        """Return the exception raised by the computation.

        This method will never block. Instead, it will raise an exception
        if calling this method would otherwise result in blocking.

        Since this method will never block, any `timeout` argument passed will
        be ignored.
        """
        ...
    
    def traceback(self, timeout=...): # -> TracebackType | None:
        """Access the traceback of the exception raised by the computation.

        This method will never block. Instead, it will raise an exception
        if calling this method would otherwise result in blocking.

        Since this method will never block, any `timeout` argument passed will
        be ignored.
        """
        ...
    
    def add_done_callback(self, fn): # -> None:
        ...
    
    def initial_metadata(self):
        """See grpc.Call.initial_metadata"""
        ...
    
    def trailing_metadata(self):
        """See grpc.Call.trailing_metadata"""
        ...
    
    def code(self):
        """See grpc.Call.code"""
        ...
    
    def details(self): # -> str:
        """See grpc.Call.details"""
        ...
    
    def debug_error_string(self): # -> str:
        ...
    


class _MultiThreadedRendezvous(_Rendezvous, grpc.Call, grpc.Future):
    """An RPC iterator that depends on a channel spin thread.

    This iterator relies upon a per-channel thread running in the background,
    dequeueing events from the completion queue, and notifying threads waiting
    on the threading.Condition object in the _RPCState object.

    This extra thread allows _MultiThreadedRendezvous to fulfill the grpc.Future interface
    and to mediate a bidirection streaming RPC.
    """
    def initial_metadata(self):
        """See grpc.Call.initial_metadata"""
        ...
    
    def trailing_metadata(self):
        """See grpc.Call.trailing_metadata"""
        ...
    
    def code(self):
        """See grpc.Call.code"""
        ...
    
    def details(self): # -> str:
        """See grpc.Call.details"""
        ...
    
    def debug_error_string(self): # -> str:
        ...
    
    def cancelled(self):
        ...
    
    def running(self): # -> bool:
        ...
    
    def done(self): # -> bool:
        ...
    
    def result(self, timeout=...):
        """Returns the result of the computation or raises its exception.

        See grpc.Future.result for the full API contract.
        """
        ...
    
    def exception(self, timeout=...): # -> Self@_MultiThreadedRendezvous | None:
        """Return the exception raised by the computation.

        See grpc.Future.exception for the full API contract.
        """
        ...
    
    def traceback(self, timeout=...): # -> TracebackType | None:
        """Access the traceback of the exception raised by the computation.

        See grpc.future.traceback for the full API contract.
        """
        ...
    
    def add_done_callback(self, fn): # -> None:
        ...
    


class _UnaryUnaryMultiCallable(grpc.UnaryUnaryMultiCallable):
    def __init__(self, channel, managed_call, method, request_serializer, response_deserializer) -> None:
        ...
    
    def __call__(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> tuple[None, _MultiThreadedRendezvous] | None:
        ...
    
    def with_call(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> tuple[None, _MultiThreadedRendezvous] | None:
        ...
    
    def future(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> _MultiThreadedRendezvous:
        ...
    


class _SingleThreadedUnaryStreamMultiCallable(grpc.UnaryStreamMultiCallable):
    def __init__(self, channel, method, request_serializer, response_deserializer) -> None:
        ...
    
    def __call__(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> _SingleThreadedRendezvous:
        ...
    


class _UnaryStreamMultiCallable(grpc.UnaryStreamMultiCallable):
    def __init__(self, channel, managed_call, method, request_serializer, response_deserializer) -> None:
        ...
    
    def __call__(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> _MultiThreadedRendezvous:
        ...
    


class _StreamUnaryMultiCallable(grpc.StreamUnaryMultiCallable):
    def __init__(self, channel, managed_call, method, request_serializer, response_deserializer) -> None:
        ...
    
    def __call__(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> tuple[None, _MultiThreadedRendezvous] | None:
        ...
    
    def with_call(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> tuple[None, _MultiThreadedRendezvous] | None:
        ...
    
    def future(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> _MultiThreadedRendezvous:
        ...
    


class _StreamStreamMultiCallable(grpc.StreamStreamMultiCallable):
    def __init__(self, channel, managed_call, method, request_serializer, response_deserializer) -> None:
        ...
    
    def __call__(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> _MultiThreadedRendezvous:
        ...
    


class _InitialMetadataFlags(int):
    """Stores immutable initial metadata flags"""
    def __new__(cls, value=...): # -> Self@_InitialMetadataFlags:
        ...
    
    def with_wait_for_ready(self, wait_for_ready): # -> Self@_InitialMetadataFlags:
        ...
    


class _ChannelCallState:
    def __init__(self, channel) -> None:
        ...
    
    def reset_postfork_child(self): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    


class _ChannelConnectivityState:
    def __init__(self, channel) -> None:
        ...
    
    def reset_postfork_child(self): # -> None:
        ...
    


class Channel(grpc.Channel):
    """A cygrpc.Channel-backed implementation of grpc.Channel."""
    def __init__(self, target, options, credentials, compression) -> None:
        """Constructor.

        Args:
          target: The target to which to connect.
          options: Configuration options for the channel.
          credentials: A cygrpc.ChannelCredentials or None.
          compression: An optional value indicating the compression method to be
            used over the lifetime of the channel.
        """
        ...
    
    def subscribe(self, callback, try_to_connect=...): # -> None:
        ...
    
    def unsubscribe(self, callback): # -> None:
        ...
    
    def unary_unary(self, method, request_serializer=..., response_deserializer=...): # -> _UnaryUnaryMultiCallable:
        ...
    
    def unary_stream(self, method, request_serializer=..., response_deserializer=...): # -> _SingleThreadedUnaryStreamMultiCallable | _UnaryStreamMultiCallable:
        ...
    
    def stream_unary(self, method, request_serializer=..., response_deserializer=...): # -> _StreamUnaryMultiCallable:
        ...
    
    def stream_stream(self, method, request_serializer=..., response_deserializer=...): # -> _StreamStreamMultiCallable:
        ...
    
    def __enter__(self): # -> Self@Channel:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> Literal[False]:
        ...
    
    def close(self): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    


