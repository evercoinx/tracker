"""
This type stub file was generated by pyright.
"""

import collections
import grpc

"""Implementation of gRPC Python interceptors."""
class _ServicePipeline:
    def __init__(self, interceptors) -> None:
        ...
    
    def execute(self, thunk, context):
        ...
    


def service_pipeline(interceptors): # -> _ServicePipeline | None:
    ...

class _ClientCallDetails(collections.namedtuple('_ClientCallDetails', ('method', 'timeout', 'metadata', 'credentials', 'wait_for_ready', 'compression')), grpc.ClientCallDetails):
    ...


class _FailureOutcome(grpc.RpcError, grpc.Future, grpc.Call):
    def __init__(self, exception, traceback) -> None:
        ...
    
    def initial_metadata(self): # -> None:
        ...
    
    def trailing_metadata(self): # -> None:
        ...
    
    def code(self): # -> Literal[StatusCode.INTERNAL]:
        ...
    
    def details(self): # -> Literal['Exception raised while intercepting the RPC']:
        ...
    
    def cancel(self): # -> Literal[False]:
        ...
    
    def cancelled(self): # -> Literal[False]:
        ...
    
    def is_active(self): # -> Literal[False]:
        ...
    
    def time_remaining(self): # -> None:
        ...
    
    def running(self): # -> Literal[False]:
        ...
    
    def done(self): # -> Literal[True]:
        ...
    
    def result(self, ignored_timeout=...): # -> NoReturn:
        ...
    
    def exception(self, ignored_timeout=...): # -> Unknown:
        ...
    
    def traceback(self, ignored_timeout=...): # -> Unknown:
        ...
    
    def add_callback(self, unused_callback): # -> Literal[False]:
        ...
    
    def add_done_callback(self, fn): # -> None:
        ...
    
    def __iter__(self): # -> Self@_FailureOutcome:
        ...
    
    def __next__(self): # -> NoReturn:
        ...
    
    def next(self): # -> NoReturn:
        ...
    


class _UnaryOutcome(grpc.Call, grpc.Future):
    def __init__(self, response, call) -> None:
        ...
    
    def initial_metadata(self):
        ...
    
    def trailing_metadata(self):
        ...
    
    def code(self):
        ...
    
    def details(self):
        ...
    
    def is_active(self):
        ...
    
    def time_remaining(self):
        ...
    
    def cancel(self):
        ...
    
    def add_callback(self, callback):
        ...
    
    def cancelled(self): # -> Literal[False]:
        ...
    
    def running(self): # -> Literal[False]:
        ...
    
    def done(self): # -> Literal[True]:
        ...
    
    def result(self, ignored_timeout=...): # -> Unknown:
        ...
    
    def exception(self, ignored_timeout=...): # -> None:
        ...
    
    def traceback(self, ignored_timeout=...): # -> None:
        ...
    
    def add_done_callback(self, fn): # -> None:
        ...
    


class _UnaryUnaryMultiCallable(grpc.UnaryUnaryMultiCallable):
    def __init__(self, thunk, method, interceptor) -> None:
        ...
    
    def __call__(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    
    def with_call(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> tuple[Unknown, Unknown]:
        ...
    
    def future(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> _FailureOutcome:
        ...
    


class _UnaryStreamMultiCallable(grpc.UnaryStreamMultiCallable):
    def __init__(self, thunk, method, interceptor) -> None:
        ...
    
    def __call__(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> _FailureOutcome:
        ...
    


class _StreamUnaryMultiCallable(grpc.StreamUnaryMultiCallable):
    def __init__(self, thunk, method, interceptor) -> None:
        ...
    
    def __call__(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    
    def with_call(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> tuple[Unknown, Unknown]:
        ...
    
    def future(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> _FailureOutcome:
        ...
    


class _StreamStreamMultiCallable(grpc.StreamStreamMultiCallable):
    def __init__(self, thunk, method, interceptor) -> None:
        ...
    
    def __call__(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...): # -> _FailureOutcome:
        ...
    


class _Channel(grpc.Channel):
    def __init__(self, channel, interceptor) -> None:
        ...
    
    def subscribe(self, callback, try_to_connect=...): # -> None:
        ...
    
    def unsubscribe(self, callback): # -> None:
        ...
    
    def unary_unary(self, method, request_serializer=..., response_deserializer=...): # -> _UnaryUnaryMultiCallable:
        ...
    
    def unary_stream(self, method, request_serializer=..., response_deserializer=...): # -> _UnaryStreamMultiCallable:
        ...
    
    def stream_unary(self, method, request_serializer=..., response_deserializer=...): # -> _StreamUnaryMultiCallable:
        ...
    
    def stream_stream(self, method, request_serializer=..., response_deserializer=...): # -> _StreamStreamMultiCallable:
        ...
    
    def __enter__(self): # -> Self@_Channel:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> Literal[False]:
        ...
    
    def close(self): # -> None:
        ...
    


def intercept_channel(channel, *interceptors):
    ...

