"""
This type stub file was generated by pyright.
"""

import collections
import grpc

"""
This type stub file was generated by pyright.
"""
class _ServicePipeline:
    def __init__(self, interceptors) -> None:
        ...
    
    def execute(self, thunk, context):
        ...
    


def service_pipeline(interceptors):
    ...

class _ClientCallDetails(collections.namedtuple('_ClientCallDetails', ('method', 'timeout', 'metadata', 'credentials', 'wait_for_ready', 'compression')), grpc.ClientCallDetails):
    ...


class _FailureOutcome(grpc.RpcError, grpc.Future, grpc.Call):
    def __init__(self, exception, traceback) -> None:
        ...
    
    def initial_metadata(self):
        ...
    
    def trailing_metadata(self):
        ...
    
    def code(self):
        ...
    
    def details(self):
        ...
    
    def cancel(self):
        ...
    
    def cancelled(self):
        ...
    
    def is_active(self):
        ...
    
    def time_remaining(self):
        ...
    
    def running(self):
        ...
    
    def done(self):
        ...
    
    def result(self, ignored_timeout=...):
        ...
    
    def exception(self, ignored_timeout=...):
        ...
    
    def traceback(self, ignored_timeout=...):
        ...
    
    def add_callback(self, unused_callback):
        ...
    
    def add_done_callback(self, fn):
        ...
    
    def __iter__(self):
        ...
    
    def __next__(self):
        ...
    
    def next(self):
        ...
    


class _UnaryOutcome(grpc.Call, grpc.Future):
    def __init__(self, response, call) -> None:
        ...
    
    def initial_metadata(self):
        ...
    
    def trailing_metadata(self):
        ...
    
    def code(self):
        ...
    
    def details(self):
        ...
    
    def is_active(self):
        ...
    
    def time_remaining(self):
        ...
    
    def cancel(self):
        ...
    
    def add_callback(self, callback):
        ...
    
    def cancelled(self):
        ...
    
    def running(self):
        ...
    
    def done(self):
        ...
    
    def result(self, ignored_timeout=...):
        ...
    
    def exception(self, ignored_timeout=...):
        ...
    
    def traceback(self, ignored_timeout=...):
        ...
    
    def add_done_callback(self, fn):
        ...
    


class _UnaryUnaryMultiCallable(grpc.UnaryUnaryMultiCallable):
    def __init__(self, thunk, method, interceptor) -> None:
        ...
    
    def __call__(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    
    def with_call(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    
    def future(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    


class _UnaryStreamMultiCallable(grpc.UnaryStreamMultiCallable):
    def __init__(self, thunk, method, interceptor) -> None:
        ...
    
    def __call__(self, request, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    


class _StreamUnaryMultiCallable(grpc.StreamUnaryMultiCallable):
    def __init__(self, thunk, method, interceptor) -> None:
        ...
    
    def __call__(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    
    def with_call(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    
    def future(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    


class _StreamStreamMultiCallable(grpc.StreamStreamMultiCallable):
    def __init__(self, thunk, method, interceptor) -> None:
        ...
    
    def __call__(self, request_iterator, timeout=..., metadata=..., credentials=..., wait_for_ready=..., compression=...):
        ...
    


class _Channel(grpc.Channel):
    def __init__(self, channel, interceptor) -> None:
        ...
    
    def subscribe(self, callback, try_to_connect=...):
        ...
    
    def unsubscribe(self, callback):
        ...
    
    def unary_unary(self, method, request_serializer=..., response_deserializer=...):
        ...
    
    def unary_stream(self, method, request_serializer=..., response_deserializer=...):
        ...
    
    def stream_unary(self, method, request_serializer=..., response_deserializer=...):
        ...
    
    def stream_stream(self, method, request_serializer=..., response_deserializer=...):
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        ...
    
    def close(self):
        ...
    


def intercept_channel(channel, *interceptors):
    ...

