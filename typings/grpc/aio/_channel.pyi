"""
This type stub file was generated by pyright.
"""

import asyncio
import sys
import grpc
from typing import Any, List, Optional, Sequence
from grpc._cython import cygrpc
from . import _base_call, _base_channel
from ._call import StreamStreamCall, StreamUnaryCall, UnaryStreamCall, UnaryUnaryCall
from ._interceptor import ClientInterceptor, StreamStreamClientInterceptor, StreamUnaryClientInterceptor, UnaryStreamClientInterceptor, UnaryUnaryClientInterceptor
from ._metadata import Metadata
from ._typing import ChannelArgumentType, DeserializingFunction, RequestIterableType, SerializingFunction

"""
This type stub file was generated by pyright.
"""
_USER_AGENT = ...
if sys.version_info[1] < 7:
    ...
else:
    ...
class _BaseMultiCallable:
    """Base class of all multi callable objects.

    Handles the initialization logic and stores common attributes.
    """
    _loop: asyncio.AbstractEventLoop
    _channel: cygrpc.AioChannel
    _method: bytes
    _request_serializer: SerializingFunction
    _response_deserializer: DeserializingFunction
    _interceptors: Optional[Sequence[ClientInterceptor]]
    _loop: asyncio.AbstractEventLoop
    def __init__(self, channel: cygrpc.AioChannel, method: bytes, request_serializer: SerializingFunction, response_deserializer: DeserializingFunction, interceptors: Optional[Sequence[ClientInterceptor]], loop: asyncio.AbstractEventLoop) -> None:
        ...
    


class UnaryUnaryMultiCallable(_BaseMultiCallable, _base_channel.UnaryUnaryMultiCallable):
    def __call__(self, request: Any, *, timeout: Optional[float] = ..., metadata: Optional[Metadata] = ..., credentials: Optional[grpc.CallCredentials] = ..., wait_for_ready: Optional[bool] = ..., compression: Optional[grpc.Compression] = ...) -> _base_call.UnaryUnaryCall:
        ...
    


class UnaryStreamMultiCallable(_BaseMultiCallable, _base_channel.UnaryStreamMultiCallable):
    def __call__(self, request: Any, *, timeout: Optional[float] = ..., metadata: Optional[Metadata] = ..., credentials: Optional[grpc.CallCredentials] = ..., wait_for_ready: Optional[bool] = ..., compression: Optional[grpc.Compression] = ...) -> _base_call.UnaryStreamCall:
        ...
    


class StreamUnaryMultiCallable(_BaseMultiCallable, _base_channel.StreamUnaryMultiCallable):
    def __call__(self, request_iterator: Optional[RequestIterableType] = ..., timeout: Optional[float] = ..., metadata: Optional[Metadata] = ..., credentials: Optional[grpc.CallCredentials] = ..., wait_for_ready: Optional[bool] = ..., compression: Optional[grpc.Compression] = ...) -> _base_call.StreamUnaryCall:
        ...
    


class StreamStreamMultiCallable(_BaseMultiCallable, _base_channel.StreamStreamMultiCallable):
    def __call__(self, request_iterator: Optional[RequestIterableType] = ..., timeout: Optional[float] = ..., metadata: Optional[Metadata] = ..., credentials: Optional[grpc.CallCredentials] = ..., wait_for_ready: Optional[bool] = ..., compression: Optional[grpc.Compression] = ...) -> _base_call.StreamStreamCall:
        ...
    


class Channel(_base_channel.Channel):
    _loop: asyncio.AbstractEventLoop
    _channel: cygrpc.AioChannel
    _unary_unary_interceptors: List[UnaryUnaryClientInterceptor]
    _unary_stream_interceptors: List[UnaryStreamClientInterceptor]
    _stream_unary_interceptors: List[StreamUnaryClientInterceptor]
    _stream_stream_interceptors: List[StreamStreamClientInterceptor]
    def __init__(self, target: str, options: ChannelArgumentType, credentials: Optional[grpc.ChannelCredentials], compression: Optional[grpc.Compression], interceptors: Optional[Sequence[ClientInterceptor]]) -> None:
        """Constructor.

        Args:
          target: The target to which to connect.
          options: Configuration options for the channel.
          credentials: A cygrpc.ChannelCredentials or None.
          compression: An optional value indicating the compression method to be
            used over the lifetime of the channel.
          interceptors: An optional list of interceptors that would be used for
            intercepting any RPC executed with that channel.
        """
        ...
    
    async def __aenter__(self):
        ...
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        ...
    
    async def close(self, grace: Optional[float] = ...):
        ...
    
    def get_state(self, try_to_connect: bool = ...) -> grpc.ChannelConnectivity:
        ...
    
    async def wait_for_state_change(self, last_observed_state: grpc.ChannelConnectivity) -> None:
        ...
    
    async def channel_ready(self) -> None:
        ...
    
    def unary_unary(self, method: str, request_serializer: Optional[SerializingFunction] = ..., response_deserializer: Optional[DeserializingFunction] = ...) -> UnaryUnaryMultiCallable:
        ...
    
    def unary_stream(self, method: str, request_serializer: Optional[SerializingFunction] = ..., response_deserializer: Optional[DeserializingFunction] = ...) -> UnaryStreamMultiCallable:
        ...
    
    def stream_unary(self, method: str, request_serializer: Optional[SerializingFunction] = ..., response_deserializer: Optional[DeserializingFunction] = ...) -> StreamUnaryMultiCallable:
        ...
    
    def stream_stream(self, method: str, request_serializer: Optional[SerializingFunction] = ..., response_deserializer: Optional[DeserializingFunction] = ...) -> StreamStreamMultiCallable:
        ...
    


def insecure_channel(target: str, options: Optional[ChannelArgumentType] = ..., compression: Optional[grpc.Compression] = ..., interceptors: Optional[Sequence[ClientInterceptor]] = ...):
    """Creates an insecure asynchronous Channel to a server.

    Args:
      target: The server address
      options: An optional list of key-value pairs (:term:`channel_arguments`
        in gRPC Core runtime) to configure the channel.
      compression: An optional value indicating the compression method to be
        used over the lifetime of the channel. This is an EXPERIMENTAL option.
      interceptors: An optional sequence of interceptors that will be executed for
        any call executed with this channel.

    Returns:
      A Channel.
    """
    ...

def secure_channel(target: str, credentials: grpc.ChannelCredentials, options: Optional[ChannelArgumentType] = ..., compression: Optional[grpc.Compression] = ..., interceptors: Optional[Sequence[ClientInterceptor]] = ...):
    """Creates a secure asynchronous Channel to a server.

    Args:
      target: The server address.
      credentials: A ChannelCredentials instance.
      options: An optional list of key-value pairs (:term:`channel_arguments`
        in gRPC Core runtime) to configure the channel.
      compression: An optional value indicating the compression method to be
        used over the lifetime of the channel. This is an EXPERIMENTAL option.
      interceptors: An optional sequence of interceptors that will be executed for
        any call executed with this channel.

    Returns:
      An aio.Channel.
    """
    ...

