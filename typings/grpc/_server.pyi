"""
This type stub file was generated by pyright.
"""

import collections
import enum
import grpc

"""Service-side implementation of gRPC Python."""
_LOGGER = ...
_SHUTDOWN_TAG = ...
_REQUEST_CALL_TAG = ...
_RECEIVE_CLOSE_ON_SERVER_TOKEN = ...
_SEND_INITIAL_METADATA_TOKEN = ...
_RECEIVE_MESSAGE_TOKEN = ...
_SEND_MESSAGE_TOKEN = ...
_SEND_INITIAL_METADATA_AND_SEND_MESSAGE_TOKEN = ...
_SEND_STATUS_FROM_SERVER_TOKEN = ...
_SEND_INITIAL_METADATA_AND_SEND_STATUS_FROM_SERVER_TOKEN = ...
_OPEN = ...
_CLOSED = ...
_CANCELLED = ...
_EMPTY_FLAGS = ...
_DEALLOCATED_SERVER_CHECK_PERIOD_S = ...
_INF_TIMEOUT = ...
class _HandlerCallDetails(collections.namedtuple('_HandlerCallDetails', ('method', 'invocation_metadata')), grpc.HandlerCallDetails):
    ...


class _RPCState:
    def __init__(self) -> None:
        ...
    


class _Context(grpc.ServicerContext):
    def __init__(self, rpc_event, state, request_deserializer) -> None:
        ...
    
    def is_active(self): # -> bool:
        ...
    
    def time_remaining(self): # -> int:
        ...
    
    def cancel(self): # -> None:
        ...
    
    def add_callback(self, callback): # -> bool:
        ...
    
    def disable_next_message_compression(self): # -> None:
        ...
    
    def invocation_metadata(self):
        ...
    
    def peer(self): # -> str:
        ...
    
    def peer_identities(self):
        ...
    
    def peer_identity_key(self): # -> str:
        ...
    
    def auth_context(self): # -> dict[str | Unknown, Unknown]:
        ...
    
    def set_compression(self, compression): # -> None:
        ...
    
    def send_initial_metadata(self, initial_metadata): # -> None:
        ...
    
    def set_trailing_metadata(self, trailing_metadata): # -> None:
        ...
    
    def trailing_metadata(self):
        ...
    
    def abort(self, code, details): # -> NoReturn:
        ...
    
    def abort_with_status(self, status): # -> NoReturn:
        ...
    
    def set_code(self, code): # -> None:
        ...
    
    def code(self):
        ...
    
    def set_details(self, details): # -> None:
        ...
    
    def details(self):
        ...
    


class _RequestIterator:
    def __init__(self, state, call, request_deserializer) -> None:
        ...
    
    def __iter__(self): # -> Self@_RequestIterator:
        ...
    
    def __next__(self):
        ...
    
    def next(self):
        ...
    


@enum.unique
class _ServerStage(enum.Enum):
    STOPPED = ...
    STARTED = ...
    GRACE = ...


class _ServerState:
    def __init__(self, completion_queue, server, generic_handlers, interceptor_pipeline, thread_pool, maximum_concurrent_rpcs) -> None:
        ...
    


class _Server(grpc.Server):
    def __init__(self, thread_pool, generic_handlers, interceptors, options, maximum_concurrent_rpcs, compression, xds) -> None:
        ...
    
    def add_generic_rpc_handlers(self, generic_rpc_handlers): # -> None:
        ...
    
    def add_insecure_port(self, address):
        ...
    
    def add_secure_port(self, address, server_credentials):
        ...
    
    def start(self): # -> None:
        ...
    
    def wait_for_termination(self, timeout=...): # -> bool:
        ...
    
    def stop(self, grace): # -> Event:
        ...
    
    def __del__(self): # -> None:
        ...
    


def create_server(thread_pool, generic_rpc_handlers, interceptors, options, maximum_concurrent_rpcs, compression, xds): # -> _Server:
    ...

